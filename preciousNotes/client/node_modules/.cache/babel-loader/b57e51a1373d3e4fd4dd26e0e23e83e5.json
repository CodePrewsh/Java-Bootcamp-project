{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\"; // Register user\n\nexport const register = createAsyncThunk(\"auth/register\", async (userData, thunkAPI) => {\n  try {\n    return await authService.register(userData);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // ✅ Add Login function\n\nexport const login = createAsyncThunk(\"auth/login\", async (userData, thunkAPI) => {\n  try {\n    return await authService.login(userData);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // ✅ Add Logout function\n\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout();\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: JSON.parse(localStorage.getItem(\"user\")) || null,\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: \"\"\n  },\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, state => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = null;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/practise/Java-Bootcamp-project/preciousNotes/client/src/features/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","register","userData","thunkAPI","error","message","response","data","toString","rejectWithValue","login","logout","authSlice","name","initialState","user","JSON","parse","localStorage","getItem","isError","isSuccess","isLoading","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","rejected","action","payload","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\";\n\n// Register user\nexport const register = createAsyncThunk(\"auth/register\", async (userData, thunkAPI) => {\n  try {\n    return await authService.register(userData);\n  } catch (error) {\n    const message = \n      (error.response && error.response.data && error.response.data.message) || \n      error.message || \n      error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// ✅ Add Login function\nexport const login = createAsyncThunk(\"auth/login\", async (userData, thunkAPI) => {\n  try {\n    return await authService.login(userData);\n  } catch (error) {\n    const message = \n      (error.response && error.response.data && error.response.data.message) || \n      error.message || \n      error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// ✅ Add Logout function\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout();\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: JSON.parse(localStorage.getItem(\"user\")) || null,\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: \"\",\n  },\n  reducers: {\n    reset: (state) => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = \"\";\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(register.fulfilled, (state) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.user = null;\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload;\n        state.user = null;\n      })\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.user = action.payload;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload;\n        state.user = null;\n      })\n      .addCase(logout.fulfilled, (state) => {\n        state.user = null;\n      });\n  },\n});\n\nexport const { reset } = authSlice.actions;\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}