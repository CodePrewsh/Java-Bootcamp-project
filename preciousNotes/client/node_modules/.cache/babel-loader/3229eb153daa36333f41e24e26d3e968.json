{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService'; // Register user\n\nexport const register = createAsyncThunk('auth/register', async (userData, thunkAPI) => {\n  try {\n    return await authService.registerUser(userData);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || 'Something went wrong';\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: ''\n  },\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/practise/Java-Bootcamp-project/preciousNotes/client/src/features/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","register","userData","thunkAPI","registerUser","error","message","response","data","rejectWithValue","authSlice","name","initialState","user","isLoading","isError","isSuccess","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CAAC,eAAD,EAAkB,OAAOG,QAAP,EAAiBC,QAAjB,KAA8B;AACtF,MAAI;AACF,WAAO,MAAMH,WAAW,CAACI,YAAZ,CAAyBF,QAAzB,CAAb;AACD,GAFD,CAEE,OAAOG,KAAP,EAAc;AACd,UAAMC,OAAO,GACVD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeC,IAAjC,IAAyCH,KAAK,CAACE,QAAN,CAAeC,IAAf,CAAoBF,OAA9D,IACAD,KAAK,CAACC,OADN,IAEA,sBAHF;AAIA,WAAOH,QAAQ,CAACM,eAAT,CAAyBH,OAAzB,CAAP;AACD;AACF,CAVuC,CAAjC;AAYP,MAAMI,SAAS,GAAGZ,WAAW,CAAC;AAC5Ba,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,IADM;AAEZC,IAAAA,SAAS,EAAE,KAFC;AAGZC,IAAAA,OAAO,EAAE,KAHG;AAIZC,IAAAA,SAAS,EAAE,KAJC;AAKZV,IAAAA,OAAO,EAAE;AALG,GAFc;AAS5BW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAW;AAChBA,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACAK,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACAG,MAAAA,KAAK,CAACb,OAAN,GAAgB,EAAhB;AACD;AANO,GATkB;AAiB5Bc,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWrB,QAAQ,CAACsB,OADpB,EAC8BJ,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACD,KAHH,EAIGQ,OAJH,CAIWrB,QAAQ,CAACuB,SAJpB,EAI+B,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9CN,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACAK,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACAG,MAAAA,KAAK,CAACN,IAAN,GAAaY,MAAM,CAACC,OAApB;AACD,KARH,EASGJ,OATH,CASWrB,QAAQ,CAAC0B,QATpB,EAS8B,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC7CN,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACAK,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACb,OAAN,GAAgBmB,MAAM,CAACC,OAAvB;AACD,KAbH;AAcD;AAhC2B,CAAD,CAA7B;AAmCA,OAAO,MAAM;AAAER,EAAAA;AAAF,IAAYR,SAAS,CAACkB,OAA5B;AACP,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport authService from './authService'\n\n// Register user\nexport const register = createAsyncThunk('auth/register', async (userData, thunkAPI) => {\n  try {\n    return await authService.registerUser(userData)\n  } catch (error) {\n    const message =\n      (error.response && error.response.data && error.response.data.message) ||\n      error.message ||\n      'Something went wrong'\n    return thunkAPI.rejectWithValue(message)\n  }\n})\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    message: '',\n  },\n  reducers: {\n    reset: (state) => {\n      state.isLoading = false\n      state.isError = false\n      state.isSuccess = false\n      state.message = ''\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(register.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.user = action.payload\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n  },\n})\n\nexport const { reset } = authSlice.actions\nexport default authSlice.reducer\n"]},"metadata":{},"sourceType":"module"}