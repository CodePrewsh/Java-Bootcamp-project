{"ast":null,"code":"var _jsxFileName = \"C:\\\\practise\\\\Java-Bootcamp-project\\\\preciousNotes\\\\client\\\\src\\\\pages\\\\Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GoalForm from '../components/GoalForm';\nimport GoalItem from '../components/GoalItem';\nimport Spinner from '../components/Spinner';\nimport { getGoals, reset } from '../features/goals/goalSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const {\n    goals,\n    isLoading,\n    isError,\n    message\n  } = useSelector(state => state.goals);\n  const [updateTrigger, setUpdateTrigger] = useState(false); // State to force refresh\n\n  useEffect(() => {\n    if (isError) {\n      console.log(message);\n    }\n\n    if (!user) {\n      navigate('/login');\n    }\n\n    dispatch(getGoals());\n    return () => {\n      dispatch(reset());\n    };\n  }, [user, navigate, isError, message, dispatch, updateTrigger]);\n\n  const handleRefresh = () => {\n    setUpdateTrigger(prev => !prev); // Toggle state to re-fetch goals\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"heading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome \", user && user.user.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Notes App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoalForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"content\",\n      children: goals.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"goals\",\n        children: goals.map(goal => /*#__PURE__*/_jsxDEV(GoalItem, {\n          goal: goal,\n          onGoalDeleted: handleRefresh\n        }, goal._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"You have not taken any Notes yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Dashboard, \"hmNHXz6P1ogv5EWlnvE9ULLUKW4=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/practise/Java-Bootcamp-project/preciousNotes/client/src/pages/Dashboard.jsx"],"names":["useEffect","useState","useNavigate","useSelector","useDispatch","GoalForm","GoalItem","Spinner","getGoals","reset","Dashboard","navigate","dispatch","user","state","auth","goals","isLoading","isError","message","updateTrigger","setUpdateTrigger","console","log","handleRefresh","prev","name","length","map","goal","_id"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,6BAAhC;;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAWV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA5B;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAyChB,WAAW,CACvDW,KAAD,IAAWA,KAAK,CAACE,KADuC,CAA1D;AAGA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCpB,QAAQ,CAAC,KAAD,CAAlD,CARmB,CAQuC;;AAE1DD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,OAAJ,EAAa;AACXI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACD;;AAED,QAAI,CAACN,IAAL,EAAW;AACTF,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACD;;AAEDC,IAAAA,QAAQ,CAACJ,QAAQ,EAAT,CAAR;AAEA,WAAO,MAAM;AACXI,MAAAA,QAAQ,CAACH,KAAK,EAAN,CAAR;AACD,KAFD;AAGD,GAdQ,EAcN,CAACI,IAAD,EAAOF,QAAP,EAAiBO,OAAjB,EAA0BC,OAA1B,EAAmCP,QAAnC,EAA6CQ,aAA7C,CAdM,CAAT;;AAgBA,QAAMI,aAAa,GAAG,MAAM;AAC1BH,IAAAA,gBAAgB,CAAEI,IAAD,IAAU,CAACA,IAAZ,CAAhB,CAD0B,CACQ;AACnC,GAFD;;AAIA,MAAIR,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA,8BACE;AAAA,+BAAaJ,IAAI,IAAIA,IAAI,CAACA,IAAL,CAAUa,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA;AAAA;AAAA;AAAA,YAPF,eASE;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA,gBACGV,KAAK,CAACW,MAAN,GAAe,CAAf,gBACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBACGX,KAAK,CAACY,GAAN,CAAWC,IAAD,iBACT,QAAC,QAAD;AAAyB,UAAA,IAAI,EAAEA,IAA/B;AAAqC,UAAA,aAAa,EAAEL;AAApD,WAAeK,IAAI,CAACC,GAApB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADD,gBAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAuBD;;GAzDQpB,S;UACUR,W,EACAE,W,EAEAD,W,EAC8BA,W;;;KALxCO,S;AA2DT,eAAeA,SAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport GoalForm from '../components/GoalForm'\nimport GoalItem from '../components/GoalItem'\nimport Spinner from '../components/Spinner'\nimport { getGoals, reset } from '../features/goals/goalSlice'\n\nfunction Dashboard() {\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const { user } = useSelector((state) => state.auth)\n  const { goals, isLoading, isError, message } = useSelector(\n    (state) => state.goals\n  )\n  const [updateTrigger, setUpdateTrigger] = useState(false) // State to force refresh\n\n  useEffect(() => {\n    if (isError) {\n      console.log(message)\n    }\n\n    if (!user) {\n      navigate('/login')\n    }\n\n    dispatch(getGoals())\n\n    return () => {\n      dispatch(reset())\n    }\n  }, [user, navigate, isError, message, dispatch, updateTrigger])\n\n  const handleRefresh = () => {\n    setUpdateTrigger((prev) => !prev) // Toggle state to re-fetch goals\n  }\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <>\n      <section className='heading'>\n        <h1>Welcome {user && user.user.name}</h1>\n        <p>Notes App</p>\n      </section>\n\n      <GoalForm />\n      <br />\n\n      <section className='content'>\n        {goals.length > 0 ? (\n          <div className='goals'>\n            {goals.map((goal) => (\n              <GoalItem key={goal._id} goal={goal} onGoalDeleted={handleRefresh} />\n            ))}\n          </div>\n        ) : (\n          <h3>You have not taken any Notes yet</h3>\n        )}\n      </section>\n    </>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}