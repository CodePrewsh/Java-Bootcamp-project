{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\nconst initialState = {\n  user: null,\n  isLoading: false,\n  isError: false,\n  isSuccess: false,\n  message: ''\n}; // Register user\n\nexport const register = createAsyncThunk('auth/register', async (userData, thunkAPI) => {\n  try {\n    return await authService.register(userData);\n  } catch (error) {\n    const message = error.response && error.response.data || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload.user;\n      state.message = action.payload.message;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/practise/Java-Bootcamp-project/preciousNotes/client/src/features/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","initialState","user","isLoading","isError","isSuccess","message","register","userData","thunkAPI","error","response","data","toString","rejectWithValue","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB,C,CAQA;;AACA,OAAO,MAAMC,QAAQ,GAAGR,gBAAgB,CACtC,eADsC,EAEtC,OAAOS,QAAP,EAAiBC,QAAjB,KAA8B;AAC5B,MAAI;AACF,WAAO,MAAMT,WAAW,CAACO,QAAZ,CAAqBC,QAArB,CAAb;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAMJ,OAAO,GACVI,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeC,IAAlC,IACAF,KAAK,CAACJ,OADN,IAEAI,KAAK,CAACG,QAAN,EAHF;AAIA,WAAOJ,QAAQ,CAACK,eAAT,CAAyBR,OAAzB,CAAP;AACD;AACF,CAZqC,CAAjC;AAeP,OAAO,MAAMS,SAAS,GAAGjB,WAAW,CAAC;AACnCkB,EAAAA,IAAI,EAAE,MAD6B;AAEnCf,EAAAA,YAFmC;AAGnCgB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAW;AAChBA,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACAgB,MAAAA,KAAK,CAACf,OAAN,GAAgB,KAAhB;AACAe,MAAAA,KAAK,CAACd,SAAN,GAAkB,KAAlB;AACAc,MAAAA,KAAK,CAACb,OAAN,GAAgB,EAAhB;AACD;AANO,GAHyB;AAWnCc,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWf,QAAQ,CAACgB,OADpB,EAC8BJ,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAAChB,SAAN,GAAkB,IAAlB;AACD,KAHH,EAIGmB,OAJH,CAIWf,QAAQ,CAACiB,SAJpB,EAI+B,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9CN,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACAgB,MAAAA,KAAK,CAACd,SAAN,GAAkB,IAAlB;AACAc,MAAAA,KAAK,CAACjB,IAAN,GAAauB,MAAM,CAACC,OAAP,CAAexB,IAA5B;AACAiB,MAAAA,KAAK,CAACb,OAAN,GAAgBmB,MAAM,CAACC,OAAP,CAAepB,OAA/B;AACD,KATH,EAUGgB,OAVH,CAUWf,QAAQ,CAACoB,QAVpB,EAU8B,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC7CN,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACAgB,MAAAA,KAAK,CAACf,OAAN,GAAgB,IAAhB;AACAe,MAAAA,KAAK,CAACb,OAAN,GAAgBmB,MAAM,CAACC,OAAvB;AACD,KAdH;AAeD;AA3BkC,CAAD,CAA7B;AA8BP,OAAO,MAAM;AAAER,EAAAA;AAAF,IAAYH,SAAS,CAACa,OAA5B;AACP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport authService from './authService'\n\nconst initialState = {\n  user: null,\n  isLoading: false,\n  isError: false,\n  isSuccess: false,\n  message: '',\n}\n\n// Register user\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (userData, thunkAPI) => {\n    try {\n      return await authService.register(userData)\n    } catch (error) {\n      const message =\n        (error.response && error.response.data) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: (state) => {\n      state.isLoading = false\n      state.isError = false\n      state.isSuccess = false\n      state.message = ''\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(register.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.user = action.payload.user\n        state.message = action.payload.message\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n  },\n})\n\nexport const { reset } = authSlice.actions\nexport default authSlice.reducer\n"]},"metadata":{},"sourceType":"module"}